#!/usr/bin/python

import os
import sys
import time
import inspect
import traceback
try:   
    import json
except ImportError: 
    import simplejson as json

BINPATH = os.path.dirname(os.path.realpath(sys.argv[0]))
sys.path.insert(0, BINPATH + '/..')
DEBUG = os.environ.has_key('DEBUG')

from omg.rpc import Sender

class Command(object):
    ''' Command parent class '''
    def __init__(self):
        self.rpc = Sender('core')

    @classmethod
    def help(cls):
        ''' Display help. '''
        cmds = get_commands(cls)
        name = cls.__name__.lower()
        for cmd in cmds:
            func = getattr(cls, cmd)
            args = "> <".join(get_args(func))
            if args:
                args = "<%s>" % args
            if name == 'help':
                cmds = ''
            opt = ''
            for l in reversed(get_optional(func)):
                    opt = '[<%s> %s]' % (l, opt)
            print >> sys.stderr, '    %s %s %s %s' % (name, cmd, args, opt)
            print >> sys.stderr, '        ', func.__doc__.strip()


class Help(Command):
    ''' Help Manager '''
    @classmethod
    def help(cls):
        ''' This help '''
        super(Help, cls).help()
        for key, val in init_cmdmap().items():
            if key != 'help':
                val.help()


class Rpc(Command):
    ''' Raw access to rpc interface. '''
    def call(self, method, args=None):
        ''' Make a raw rpc call. '''
        if args and args.startswith('json:'):
            args = json.loads(args[5:])
            
        r = self.rpc.call(method, args)
        print r


class Base(Command):
    ''' Base image manager '''
    def create(self, name, path):
        ''' Create base image. '''
        r = self.rpc.call('image_create', {'type': 'base', 'name': name, 
            'path': path})
        print r

    def list(self):
        ''' List existing images. '''
        r = self.rpc.call('image_list', {'type': 'base'})
        imgs = Images('base')
        print r

    def delete(self, name):
        ''' Delete a base image. '''
        r = self.rpc.call('image_delete', {'name': name})
        print r


class Image(Command):
    ''' Image manager '''
    pass


class Vm(Command):
    ''' Vm manager '''

    def list(self):
        ''' List existing vms. '''
        r = self.rpc.call('vm_list', 'active')
        tpl = "{name:20}{uuid:40}{cpus:6}{ram:5}{vnc:8}{state:7}{ip:5}"
        print tpl.format(name="NAME", uuid="UUID", cpus="CPUS", ram="RAM",
            vnc="VNC", state="STATE", ip="IP")
        for i in r['return']:
            print tpl.format(**i)

    def create(self, name, ram=None, cpus=None, base=None):
        ''' Create a new vm. '''
        r = self.rpc.call('vm_create', {'name': name, 'ram': ram, 'cpus': cpus, 
            'base': base})
        print r

    def restart(self, name):
        ''' Restart a vm. '''
        print self.stop(name)
        print self.start(name)

    def start(self, name):
        ''' Start a vm. '''
        r = self.rpc.call('vm_start', {'name': name})
        print r

    def stop(self, name):
        ''' Stop a vm. '''
        r = self.rpc.call('vm_stop', {'name': name})
        print r

    def destroy(self, name):
        ''' Destroy a vm. '''
        r = self.rpc.call('vm_destroy', {'name': name})
        print r
    
    def get(self, name):
        ''' Get a vm. '''
        r = self.rpc.call('vm_get', {'name': name})
        tpl = "{key:20}{value}"
        print tpl.format(key='KEY', value='VALUE')
        for k,v in r['return'].items():
            print tpl.format(key=k+':', value=v)

    def delete(self, name):
        ''' Delete a vm. '''
        r = self.rpc.call('vm_delete', {'name': name})
        print r

    def edit(self, name, key, value):
        ''' Edit a vm value '''
        r = self.rpc.call('vm_edit', {'name': name, 'key': key,
            'value': value})
        print r

class Config(Command):
    ''' Config Manager '''
    def set(self, key, value):
        ''' Set a configuration value. '''
        r = self.rpc.call('config_set', {'key': key, 'value': value})
        print r

    def get(self, key=None):
        ''' Get configuration values. '''
        r = self.rpc.call('config_get', {'key': key})
        tpl = "{key:20}{value}"
        print tpl.format(key='KEY', value='VALUE')
        for k,v in r['return'].items():
            print tpl.format(key=k+':', value=v)


class Node(Command):
    ''' Node Manager '''
    def list(self):
        r = self.rpc.call('node_list', 'all')
        tpl = "{uuid:40}{hostname:20}{checkin:30}{rpc_uri}"
        print tpl.format(uuid="UUID", hostname="HOSTNAME", checkin="LAST CHECKIN", rpc_uri="RPC URI")
        for n in r['return']:
            n['checkin'] = time.ctime(float(n['checkin']))
            print tpl.format(**n)

    def get(self, name):
        print self.rpc.call('node_get', {'name': name})
    
    def activate(self, name):
        print self.rpc.call('node_activate', {'name': name})

    def deactivate(self, name):
        print self.rpc.call('node_deactivate', {'name': name})


def init_cmdmap():
    ''' build dict of all available Command subclasses '''
    cmap = {}
    for sub in Command.__subclasses__():
        cmap[sub.__name__.lower()] = sub
    return cmap

def arg_count(func):
    ''' Get number of arguments for a function '''
    temp = inspect.getargspec(func)
    amax = len(temp.args) - 1
    amin = amax-len(temp.defaults) if temp.defaults else amax
    return (amin, amax)

def get_args(func):
    ''' Get argument names '''
    temp = inspect.getargspec(func)
    optc = len(temp.defaults) if temp.defaults else 0
    return temp.args[1:-optc]

def get_optional(func):
    ''' Get optional arguments '''
    temp = inspect.getargspec(func)
    if temp.defaults:
        return temp.args[-len(temp.defaults):]
    else:
        return [] 

def get_commands(kls):
    ''' Get class function names '''
    return [x for x in dir(kls) if x[0] != '_' and callable(getattr(kls, x))]

def display_help(msg, kls, ret=1):
    ''' Print help message '''
    print >> sys.stderr, msg
    kls.help()
    sys.exit(ret)

def main(argv):
    ''' Program entry point '''
    if len(argv) < 1:
        display_help("Missing Command", Help)

    cmdmap = init_cmdmap()
    cmd = argv.pop(0)

    if cmd == 'display_help':
        display_help("Help", Help, 0)

    try:
        command = cmdmap[cmd]()
    except KeyError:
        if DEBUG:
            traceback.print_exc(file=sys.stderr)
        display_help("Unknown Command", Help)

    try:
        sub = argv.pop(0)
    except IndexError:
        if DEBUG:
            traceback.print_exc(file=sys.stderr)
        display_help("Missing Action", command)

    try:
        func = getattr(command, sub)
    except AttributeError:
        if DEBUG:
            traceback.print_exc(file=sys.stderr)
        display_help("Unknown Action", Help)

    count = len(argv)
    amin, amax = arg_count(func)
    if amin <= count <= amax:
        try:
            func(*argv)
        except KeyboardInterrupt:
            sys.exit()
        except Exception:
            print >> sys.stderr, "Error running command:"
            if DEBUG:
                traceback.print_exc(file=sys.stderr)
            sys.exit(1)
    else:
        msg = "Not enough" if count < amin else "Too many"
        msg +=" Arguments"
        display_help(msg, command)

if __name__ == '__main__':
    main(sys.argv[1:])

